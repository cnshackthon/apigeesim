/*
 * Network as Code
 *
 * Manipulate network conditions via simplified REST calls
 *
 * API version: 2
 * Contact: todd.levi@nokia.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"encoding/json"
	"net/http"
	"strings"

	//"github.com/gorilla/mux"
)

// LocationApiController binds http requests to an api service and writes the service results to the http response
type LocationApiController struct {
	service LocationApiServicer
	errorHandler ErrorHandler
}

// LocationApiOption for how the controller is set up.
type LocationApiOption func(*LocationApiController)

// WithLocationApiErrorHandler inject ErrorHandler into controller
func WithLocationApiErrorHandler(h ErrorHandler) LocationApiOption {
	return func(c *LocationApiController) {
		c.errorHandler = h
	}
}

// NewLocationApiController creates a default api controller
func NewLocationApiController(s LocationApiServicer, opts ...LocationApiOption) Router {
	controller := &LocationApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the LocationApiController
func (c *LocationApiController) Routes() Routes {
	return Routes{ 
		{
			"GetSubscriberLocation",
			strings.ToUpper("Post"),
			"/nac/v2/subscriber/location",
			c.GetSubscriberLocation,
		},
	}
}

// GetSubscriberLocation - Get last reported location
func (c *LocationApiController) GetSubscriberLocation(w http.ResponseWriter, r *http.Request) {
	subscriberIdParam := SubscriberId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&subscriberIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubscriberIdRequired(subscriberIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	xTestmodeParam := r.Header.Get("x-testmode")
	result, err := c.service.GetSubscriberLocation(r.Context(), subscriberIdParam, xTestmodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
