/*
 * Network as Code
 *
 * Manipulate network conditions via simplified REST calls
 *
 * API version: 2
 * Contact: todd.levi@nokia.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

type BandwidthResponse struct {

	Id string `json:"id"`
}

// AssertBandwidthResponseRequired checks if the required fields are not zero-ed
func AssertBandwidthResponseRequired(obj BandwidthResponse) error {
	elements := map[string]interface{}{
		"id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseBandwidthResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of BandwidthResponse (e.g. [][]BandwidthResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseBandwidthResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aBandwidthResponse, ok := obj.(BandwidthResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertBandwidthResponseRequired(aBandwidthResponse)
	})
}
